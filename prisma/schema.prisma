// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model with authentication and profile information
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password     String?
  name          String?
  image         String?
  role          UserRole  @default(USER)
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Profile information
  dateOfBirth   DateTime?
  gender        Gender?
  phone         String?
  address       String?
  city          String?
  country       String?
  timezone      String?
  
  // Ayurvedic profile
  doshaType     DoshaType?
  healthGoals   String[]
  medicalHistory String?
  allergies     String[]
  
  // Relationships
  accounts      Account[]
  sessions      Session[]
  chatMessages  ChatMessage[]
  blogPosts     BlogPost[]
  savedArticles SavedArticle[]
  wellnessProgress WellnessProgress[]
  userPreferences UserPreferences?
  programEnrollments ProgramEnrollment[]
  
  @@map("users")
}

// NextAuth.js Account model
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// NextAuth.js Session model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// NextAuth.js Verification Token model
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Chat message model for storing chatbot conversations
model ChatMessage {
  id        String   @id @default(cuid())
  userId    String
  message   String   @db.Text
  botReply  String   @db.Text
  timestamp DateTime @default(now())
  messageType MessageType @default(TEXT)
  metadata  Json? // Store additional context like dosha type, session info
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("chat_messages")
}

// Blog posts and articles model
model BlogPost {
  id          String   @id @default(cuid())
  title       String
  content     String   @db.Text
  excerpt     String?
  slug        String   @unique
  authorId    String
  status      PostStatus @default(DRAFT)
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // SEO and categorization
  metaTitle       String?
  metaDescription String?
  tags            String[]
  category        String?
  featuredImage   String?
  
  // Engagement metrics
  viewCount       Int      @default(0)
  likeCount       Int      @default(0)
  shareCount      Int      @default(0)
  
  // Relationships
  author          User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  savedBy         SavedArticle[]
  
  @@map("blog_posts")
}

// Saved articles by users
model SavedArticle {
  id        String   @id @default(cuid())
  userId    String
  blogPostId String
  savedAt   DateTime @default(now())
  notes     String?
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  blogPost  BlogPost @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
  
  @@unique([userId, blogPostId])
  @@map("saved_articles")
}

// Wellness programs (Yoga, Ayurveda, Meditation)
model WellnessProgram {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  category   ProgramCategory
  difficulty Difficulty
  duration   Int      // Duration in minutes
  thumbnail  String?
  
  // Program content
  modules    ProgramModule[]
  requirements String[]
  benefits   String[]
  
  // Metadata
  tags       String[]
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Relationships
  enrollments ProgramEnrollment[]
  
  @@map("wellness_programs")
}

// Individual modules within wellness programs
model ProgramModule {
  id        String   @id @default(cuid())
  programId String
  title     String
  content   String   @db.Text
  order     Int
  duration  Int      // Duration in minutes
  videoUrl  String?
  audioUrl  String?
  resources Json?    // Additional resources, PDFs, etc.
  
  program   WellnessProgram @relation(fields: [programId], references: [id], onDelete: Cascade)
  
  @@map("program_modules")
}

// User enrollments in wellness programs
model ProgramEnrollment {
  id        String   @id @default(cuid())
  userId    String
  programId String
  enrolledAt DateTime @default(now())
  completedAt DateTime?
  progress  Int      @default(0) // Progress percentage 0-100
  status    EnrollmentStatus @default(ACTIVE)
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  program   WellnessProgram @relation(fields: [programId], references: [id], onDelete: Cascade)
  
  @@unique([userId, programId])
  @@map("program_enrollments")
}

// User wellness progress tracking
model WellnessProgress {
  id        String   @id @default(cuid())
  userId    String
  date      DateTime
  activity  String
  duration  Int      // Duration in minutes
  intensity Intensity?
  notes     String?
  mood      Mood?
  energy    Int?     // Energy level 1-10
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("wellness_progress")
}

// User preferences and settings
model UserPreferences {
  id                    String   @id @default(cuid())
  userId                String   @unique
  notificationSettings  Json     // Email, push, SMS preferences
  privacySettings       Json     // Data sharing preferences
  wellnessGoals         String[]
  preferredCategories   String[]
  timePreferences       Json     // Preferred times for activities
  accessibilitySettings Json     // Font size, contrast, etc.
  
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_preferences")
}

// Enums
enum UserRole {
  USER
  ADMIN
  MODERATOR
  TUTOR
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum DoshaType {
  VATA
  PITTA
  KAPHA
  VATA_PITTA
  VATA_KAPHA
  PITTA_KAPHA
  TRIDOSHA
}

enum MessageType {
  TEXT
  IMAGE
  AUDIO
  VIDEO
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum ProgramCategory {
  YOGA
  AYURVEDA
  MEDITATION
  PRANAYAMA
  MINDFULNESS
  NUTRITION
  LIFESTYLE
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  ALL_LEVELS
}

enum EnrollmentStatus {
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum Intensity {
  LOW
  MODERATE
  HIGH
}

enum Mood {
  EXCELLENT
  GOOD
  NEUTRAL
  POOR
  TERRIBLE
}
